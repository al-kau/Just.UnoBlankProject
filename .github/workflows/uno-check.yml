---

name: uno.check

on:
  workflow_dispatch:
jobs:
  uno-check:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/setup-dotnet@v4.0.1
        with:
          dotnet-version: 8.0.x

      - name: dotnet info
        shell: bash
        run: |
          dotnet --version
          dotnet --info

      - name: print env
        shell: bash
        run: |
          echo "env.RUNNER_OS is ${{ env.RUNNER_OS }}"
          echo "runner.os is ${{ runner.os }}"
          printenv

      - name: update uno.check
        shell: bash
        run: dotnet tool install uno.check --global

      - name: list uno.check checkups
        id: skip
        shell: bash
        run: |
          uno-check list > ./uno-check-list.log

          file="$(cat uno-check-list.log)"
          skip=""

          pattern='\(([^\)]*)\)([^$]*)'
          while [[ $file =~ $pattern ]]; do
            skip="$skip --skip=${BASH_REMATCH[1]}"
            file=${BASH_REMATCH[2]}
          done
         
          echo "skip=$skip" >> $GITHUB_OUTPUT

      - name: manifest uno.check
        id: manifest
        shell: bash
        run: |
          uno-check --verbose --non-interactive --ci ${{ steps.skip.outputs.skip }} --logfile=./uno-check.log
          file="$(cat ./uno-check.log)"

          echo "log: $file"

          pattern='Loading Manifest from: ([^[:space:]]*)'
          [[ "$file" =~ $pattern ]] && manifest_url="${BASH_REMATCH[1]}"

          echo "manifest url: $manifest_url"
          echo "BASH_REMATCH[0]: ${BASH_REMATCH[0]}"

          wget --quiet --output-document="./manifest.json" "$manifest_url"

          manifest_content=$(cat ./manifest.json)

          echo "manifest content: $manifest_content"

          echo "manifest<<EOF" >> $GITHUB_OUTPUT
          echo "$manifest_content" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - shell: bash
        run: |
          echo "openjdk version: ${{ fromJson( steps.manifest.outputs.manifest ).check.openjdk.version }}"

      - uses: actions/setup-java@v4.3.0
        #if: ${{ runner.os == 'Linux' }}
        with:
          distribution: 'microsoft'
          java-version: ${{ fromJson( steps.manifest.outputs.manifest ).check.openjdk.version }}

      - name: run uno.check
        shell: bash
        run: |
          uno-check --verbose --non-interactive --ci --fix \
                    --skip xcode --skip vswin --skip vsmac \
                    --skip windowshyperv --skip edgewebview2 --skip androidemulator --skip dotnetnewunotemplates
